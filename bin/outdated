#!/usr/bin/env bash

# Checks for outdated project dependencies

set -o errexit

readonly COLOR_RED=$(echo -e "\033[0;31m")
readonly COLOR_GREEN=$(echo -e "\033[0;32m")
readonly COLOR_YELLOW=$(echo -e "\033[0;33m")
readonly COLOR_BLUE=$(echo -e "\033[0;34m")
readonly COLOR_RESET=$(echo -e "\033[0;0m")

readonly DATE_FORMAT="%Y-%m-%d %H:%M:%S%z"

readonly COMPOSER=${COMPOSER:-1}
readonly YARN=${YARN:-1}

log::info () {
    date +"${COLOR_YELLOW}[${DATE_FORMAT}]${COLOR_RESET} ${COLOR_GREEN}${1}${COLOR_RESET}"
}

log::error () {
    date +"${COLOR_YELLOW}[${DATE_FORMAT}]${COLOR_RESET} ${COLOR_RED}${1}${COLOR_RESET}"
}

is_installed () {
    if ! command -v "$1" >/dev/null ; then
        log::error "Command ${COLOR_BLUE}${1}${COLOR_RED} not found in \$PATH, exiting"
        return 0
    fi

    return 0
}

# Check for outdated composer dependencies
check::composer () {
    log::info "Checking for local outdated composer dependencies..."

    if [ ! -f composer.lock ]; then
        log::error "Unable to find ${COLOR_BLUE}composer.lock${COLOR_RED} file, exiting"
        return
    fi

    is_installed composer || return

    composer --no-ansi outdated | awk '{
        for (i = 1; i < NF-1; i++) print $1, $2, $4
    }' | uniq | column -t
}

# Check for outdated Node.js packages via yarn
check::yarn () {
    log::info "Checking for local outdated yarn dependencies..."

    if [ ! -f yarn.lock ]; then
        log::error "Unable to find ${COLOR_BLUE}yarn.lock${COLOR_RED} file, exiting"
        return
    fi

    is_installed yarn || return

    yarn outdated | tail +6 | sed '$d' | awk '{
        for (i = 1; i < NF-1; i++) {
            print $1, $2, $3, $4
        } }' | uniq | column -t
}

[ "$COMPOSER" = 1 ] && check::composer
[ "$YARN" = 1 ]     && check::yarn

