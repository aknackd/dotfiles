# Various functions

# retrieves our current shell according to $SHELL
function get_shell () {
    echo $(basename $SHELL)
}

# define . if our shell is zsh
if [ $(get_shell) = "zsh" ]; then
    function . () {
        source $*
    }
fi

# Adds a directory to $PATH if not already present
# -- stolen from Redhat/Fedora/CentOS
function pathmunge () {
	if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
        # only append paths that exist
        [ ! -d $1 ] && return
        [[ "$2" == "after" ]] && PATH="${PATH}:$1" || PATH="$1:${PATH}"
	fi
}

# checks if a function/alias exists
function function_exists() {
	type $1 | grep -q 'shell function'
}

# convert string to lowercase
function strtolower() {
    echo $@ | tr '[A-Z]' '[a-z]'
}

# convert string to uppercase
function strtoupper() {
    echo $@ | tr '[a-z]' '[A-Z]'
}

# trim leading and trailing whitepaces from a string
function trim_string() {
    local s=$1
    s="$(echo $s | sed 's/^\s+//g; s/\s*$//g')"
    echo $s
}

# checks if an item is in an array
# usage:
#     $ my_arr=(one two three)
#     $ [[ $(in_array two "${my_arr[@]}") -eq 1 ]] && echo YES || echo NO
function in_array() {
    local item
    for item in "${@:2}"; do
        if [[ "$item" == "$1" ]]; then
            echo 1
            return
        fi
    done
    echo 0
}

# is <script/binary> installed? (only checks $PATH and builtins)
function am_i_installed() {
    command -v $1 >/dev/null 2>&1 && echo 1 || echo 0
}

# is an alias defined?
function is_alias_defined() {
    alias | grep $1 1>/dev/null && echo 1 || echo 0
}

# am I on OSX?
function is_this_osx() {
    [[ "$(strtolower $(uname -s))" == "darwin" ]] && echo 1 || echo 0
}

# am I on linux?
function is_this_linux() {
    [[ "$(strtolower $(uname -s))" == "linux" ]] && echo 1 || echo 0
}

# am I on SunOS? (ha!)
function is_this_sunos() {
    [[ "$(strtolower $(uname -s))" == 'sunos' ]] && echo 1 || echo 0
}

# simple calculator
function calc () {
    awk "BEGIN { pi = 4.0*atan2(1.0,1.0); degree = pi/180.0; print $* }";
}

# get current timezone
function get_timezone() {
    local timezone=

    if [ ! -z "$TZ" ]; then
        timezone="$TZ"
    else
        if [ $(is_this_osx) -eq 1 ]; then
            timezone="$(systemsetup -gettimezone | cut -d : -f 2)"
        elif [ $(is_this_linux) -eq 1 ]; then
            # not sure if this'll work for all linux distros
            timezone="$(readlink /etc/localtime | sed -s /\/usr\/share\/zoneinfo\//g)"
        fi
    fi

    echo $(trim_string "${timezone}")
}

# convert epoch (unix time) to a more readable format (default: Y-m-d H:i:s)
# usage: fromunixtime <epoch> <php date() format>
function fromunixtime() {
    local use_fallback=0
    local _date=

    if [ $(is_this_osx) -eq 1 ]; then
        # try gdate from homebrew first
        if [ $(am_i_installed brew) -eq 1 ]; then
            [ $(am_i_installed gdate) ] && _date=gdate || use_fallback=1
        fi
    else
        _date=date
    fi

    # fallback is using php
    if [ $use_fallback -eq 1 ]; then
        if [ $(am_i_installed php) -eq 1 ]; then
            local format="Y-m-d H:i:s"
            local timezone="$(get_timezone)"
            [[ ! -z "$2" ]] && format="$2"
            php -r "date_default_timezone_set('${timezone}'); echo date('${format}', $1).PHP_EOL;"
        fi
    else
        # most linux systems should have `date -d` available by now
        # unfortunately `-d` in BSD is for setting DST
        ${_date} -d @$1 +'%Y-%m-%d %H:%M:%S'
    fi
}

# Determines the current branch if we're in a git repository
if [ "$(basename $SHELL)" = "bash" ]; then
    if [ -f /opt/local/etc/bash_completion ]; then
        . /opt/local/etc/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    else
        __git_ps1() {
            git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git::\1)/'
        }
    fi
fi

# telnet SSL connections
function telnet_ssl() {
    # Usage: $0 _server_ _port_
    if [ $(am_i_installed openssl) -eq 1 ]; then
        openssl s_client -connect $1:$2
    elif [ $(am_i_installed gnutls-cli) -eq 1 ]; then
        gnutls-cli --insecure $1
    else
        echo "Please install either \`openssl\` or \`gnutls-utils\`"
        echo 1
    fi
}
